ndjson-map 'd.id = d.properties.GEOID.slice(2), d' \
  < ut-central.ndjson \
  > ut-central-id.ndjson


curl 'http://api.census.gov/data/2014/acs5?get=B01003_001E&for=tract:*&in=state:49' -o cb_2014_49_tract_B01003.json


ndjson-cat cb_2014_49_tract_B01003.json \
  | ndjson-split 'd.slice(1)' \
  | ndjson-map '{id: d[2] + d[3], B01003: +d[0]}' \
  > cb_2014_49_tract_B01003.ndjson



ndjson-join 'd.id' \
  ut-central-id.ndjson \
  cb_2014_49_tract_B01003.ndjson \
  > ut-central-join.ndjson


ndjson-map 'd[0].properties = {density: Math.floor(d[1].B01003 / d[0].properties.ALAND * 2589975.2356)}, d[0]' \
< ut-central-join.ndjson \
> ut-central-density.ndjson


ndjson-reduce \
< ut-central-density.ndjson \
| ndjson-map '{type: "FeatureCollection", features: d}' \
> ut-central-density.json

ndjson-map -r d3 \
  '(d.properties.fill = d3.scaleSequential(d3.interpolateViridis).domain([0, 4000])(d.properties.density), d)' \
  < ut-central-density.ndjson \
  > ut-central-color.ndjson

geo2svg -n --stroke none -p 1 -w 960 -h 960 \
  < ut-central-color.ndjson \
  > ut-central-color.svg  


npm install -g topojson


geo2topo -n \
  tracts=ut-central-density.ndjson \
  > ut-central-topo.json


toposimplify -p 1 -f \
  < ut-central-topo.json \
  > ut-simple-topo.json


topoquantize 1e5 \
  < ut-simple-topo.json \
  > ut-quantized-topo.json

topomerge -k 'd.id.slice(0, 3)' counties=tracts \
  < ut-quantized-topo.json \
  > ut-merge-topo.json


topomerge --mesh -f 'a !== b' counties=counties \
  < ut-merge-topo.json \
  > ut-topo.json

topo2geo tracts=- \
  < ut-topo.json \
  | ndjson-map -r d3 'z = d3.scaleSequential(d3.interpolateViridis).domain([0, 4000]), d.features.forEach(f => f.properties.fill = z(f.properties.density)), d' \
  | ndjson-split 'd.features' \
  | geo2svg -n --stroke none -p 1 -w 960 -h 960 \
  > ut-tracts-color.svg


topo2geo tracts=- \
< ut-topo.json \
| ndjson-map -r d3 'z = d3.scaleSequential(d3.interpolateViridis).domain([0, 100]), d.features.forEach(f => f.properties.fill = z(Math.sqrt(f.properties.density))), d' \
| ndjson-split 'd.features' \
| geo2svg -n --stroke none -p 1 -w 960 -h 960 \
> ut-tracts-sqrt.svg


topo2geo tracts=- \
  < ut-topo.json \
  | ndjson-map -r d3 'z = d3.scaleLog().domain(d3.extent(d.features.filter(f => f.properties.density), f => f.properties.density)).interpolate(() => d3.interpolateViridis), d.features.forEach(f => f.properties.fill = z(f.properties.density)), d' \
  | ndjson-split 'd.features' \
  | geo2svg -n --stroke none -p 1 -w 960 -h 960 \
  > ut-tracts-log.svg
